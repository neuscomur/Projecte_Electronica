
#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>

#define SERVICE_UUID        "4cbd1aa2-2e2b-4a51-9be0-a577dcf27eec"
#define CHARACTERISTIC_UUID "7a6ffc80-ef27-4a4d-a8a6-56d93f8feff3"
#define BUFFER_SIZE 50
#define SAMPLING_RATE 500
#define NUM_MOSTRES 120 //2min * 60s * 1mostra/s (aprox) = 120

#define MAX_CHUNK_SIZE 20

//NOSTRES DEFINICIONS
#define DATA_LENGTH 20
#define MAX_DADES_CALCULS 500

unsigned long temps_pic = 0;
unsigned long array_temps_pic [NUM_MOSTRES];
int comptador_temps = 0;
unsigned long intervals_RR [NUM_MOSTRES];

unsigned long lastPeriod = micros();

//u_int16_t samplingTime =(1/SAMPLING_RATE)*1000000;  // temps de mostreig en milisegons
unsigned long samplingTime=2000; //microsegons

unsigned long last_sns_time = 0;

typedef struct {
  float buffer[DATA_LENGTH]; // float que conté les BUFFER_SIZE mostres d'ECG/resp
  int nsamples;
} BufferDades;

BufferDades crearBufferDades() {   // Retorna un BufferDades ja iniciat
  BufferDades bd;
  bd.nsamples = 0;
  return bd;
}

// Creem els buffers de dades d'ECG i Respiració
BufferDades dataECG = crearBufferDades();
BufferDades dataResp = crearBufferDades();

typedef struct {
  float buffer[DATA_LENGTH + DATA_LENGTH + 3]; // float que conté les BUFFER_SIZE mostres d'ECG i respiració i una dada de SNS, PNS i stress
  int nsamples;
} BufferBLE;

BufferBLE crearBufferBLE() {   // Retorna un BufferBLE ja iniciat
  BufferBLE bd;
  bd.nsamples = 0;
  return bd;
}

BufferBLE dataTotal = crearBufferBLE(); // Variable que guarda totes les dades i el nombre de dades que conté

typedef struct {
  float buffer[MAX_DADES_CALCULS]; // float que conté les BUFFER_SIZE mostres d'ECG i respiració i una dada de SNS, PNS i stress
  int nsamples;
} BufferCalculs;

BufferCalculs crearBufferCalculs() {   // Retorna un BufferCalculs ja iniciat, aquest servirà per guardar les dades i fer càlculs
  BufferCalculs bd;
  bd.nsamples = 0;
  return bd;
}

BufferCalculs array_ECG_Calculs = crearBufferCalculs();

// Inicialitzem els valors de sns, pns i stress
float sns = 0.0;
float pns = 0.0;
float stress = 0.0;


// Constants per simular l'ECG
const float fs = 500.0;         // Frequència de mostreig (500 Hz)
const float duration = 10.0;    // Durada en segons
const float heart_rate = 60.0;  // Ritme cardíac en BPM (batecs per minut)

// inicialitzem la forma d'ona ECG
float p_wave = 0.0;
float qrs_wave = 0.0;
float t_wave = 0.0;

// Paràmetres de la forma de l'ECG
const float P_amp = 0.1;   // Amplitud de l'ona P
const float QRS_amp = 1.0; // Amplitud del complex QRS
const float T_amp = 0.3;   // Amplitud de l'ona T

const float P_duration = 0.1;   // Durada de l'ona P (en segons)
const float QRS_duration = 0.1; // Durada del complex QRS (en segons)
const float T_duration = 0.2;   // Durada de l'ona T (en segons)

// Temps i càlculs de les mostres
float temps = 0.0;
float tempsResp = 0.0;
float dt = 1.0 / fs;
float rr_interval = 60.0 / heart_rate;  // Interval RR en segons
float rr_variability = 0.05;  // Variabilitat en el temps RR (5% de variació)

// Constants senyal respiració
const float resp_freq = 0.25; // Hz (15 respiracions per minut)
const float resp_ampl = 0.5;  // mV
const float resp_offset = 3.0; // mV

int n_punts = 0;

// Funció per generar una ona gaussiana per a les onades P, QRS i T
float gaussian_wave(float t, float amplitude, float duration) {
  return amplitude * exp(-0.5 * pow(t / (duration / 2.0), 2));
}

// Funció per simular el complex QRS amb una part negativa (Q i S)
float qrs_wave_with_negatives(float t, float amplitude, float duration) {
  // El complex QRS té una part negativa (Q i S)
  float positive_peak = gaussian_wave(t, amplitude, duration / 2.0);  // Paret positiva
  float negative_peak = gaussian_wave(t - duration / 2.0, -amplitude / 2.0, duration / 2.0); // Part negativa (Q i S)
  
  return positive_peak + negative_peak;
}

void sendLargeData(BLECharacteristic *pTxCharacteristic, size_t bufferSize) {
  // Dividir i enviar les dades per fragments petits
  for (int i = 0; i < (DATA_LENGTH + DATA_LENGTH + 3); i++){
    if(i < DATA_LENGTH){
      // Afegir les dades ECG al buffer de dades
      dataTotal.buffer[i] = dataECG.buffer[i];
    }
    else if(i < DATA_LENGTH + DATA_LENGTH){
      for (int j = 0; j < DATA_LENGTH; j++){
        // Afegir les DATA_LENGTH dades de respiració després de les d'ECG
        dataTotal.buffer[i] = dataResp.buffer[j];
      }
    }
    else{
      // Afegir una dada de cada després de les de respiració
      dataTotal.buffer[i] = sns;
      dataTotal.buffer[i+1] = pns;
      dataTotal.buffer[i+2] = stress;
      break;
    }
  }

  // Utilitzar un punter de bytes per accedir a l'array de floats
  // Enviar les dades com a bytes
  pTxCharacteristic->setValue((uint8_t*)dataTotal.buffer, bufferSize);
  pTxCharacteristic->notify();
  Serial.println("Dada enviada");
}


//paràmetres BLE
bool deviceConnected = false;
bool oldDeviceConnected = false;
BLEServer *pServer = NULL;
BLECharacteristic *pTxCharacteristic;

class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer){
    deviceConnected = true;
  };
  void onDisconnect(BLEServer* pServer){
    deviceConnected = false;
  }
};

float obtenir_pic_R(float* senyal, int mida){

  int comptador = 0; //Comptador de quants pics trobem
  float pics_R[10] = {0};

  //bucle per trobar màxims
  for (int i = 1; i < mida - 1; i++) {
    if (senyal[i] > senyal[i - 1] && senyal[i] > senyal[i + 1]) {
      pics_R[comptador] = senyal[i];
      comptador++;
    }
  }

  //Obtenir pic màxim del senyal
  float pic_max = pics_R[0];
  for (int i = 1; i < comptador; i++) {
    if (pics_R[i] > pic_max) {
      pic_max = pics_R[i];
    }
  }
  return pic_max;
}


void setup() {
  // Inicialització de la comunicació sèrie
  Serial.begin(115200);
  
  // Inicialitzar la funció random
  randomSeed(analogRead(0)); // Alimentem el generador de números aleatoris
    
  BLEDevice::init("ESP32-NeusMar");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService *pService = pServer->createService(SERVICE_UUID);
  pTxCharacteristic = pService->createCharacteristic(CHARACTERISTIC_UUID,
                          BLECharacteristic::PROPERTY_READ   |
                          BLECharacteristic::PROPERTY_WRITE  |
                          BLECharacteristic::PROPERTY_NOTIFY);
  
  pTxCharacteristic->addDescriptor(new BLE2902());
  pService->start();

  //Comença a fer advertising
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  BLEDevice::startAdvertising();
  Serial.println("waiting a client connection to notify...");
}


void loop() {
  unsigned long presentPeriod = micros();
 
  if ((presentPeriod-lastPeriod) >= samplingTime){
    
    lastPeriod = presentPeriod;
    
    // Assignar les ones al cicle del cor (P, QRS, T)
    // Ona P - Apareix abans del QRS
    if (temps < P_duration)
    p_wave = gaussian_wave(temps, P_amp, P_duration);
    
      // Complex QRS amb part negativa (Q i S)
    if (temps >= P_duration && temps < P_duration + QRS_duration) {
      qrs_wave = qrs_wave_with_negatives(temps - P_duration, QRS_amp, QRS_duration);
    }

    // Ona T - Apareix després del QRS
    if (temps >= P_duration + QRS_duration && temps < P_duration + QRS_duration + T_duration) {
      t_wave = gaussian_wave(temps - P_duration - QRS_duration, T_amp, T_duration);
    }

    // Generem mostres de cada senyal
    float ecg_value = p_wave + qrs_wave + t_wave; // Senyal ECG com a suma de les onades P, QRS i T
    float resp_value = resp_offset + resp_ampl * sin(2 * PI * resp_freq * tempsResp);
    
    // Incrementar el temps per al següent mostreig
    temps += dt;
    tempsResp +=dt;
    // Afegir variabilitat al interval RR, ajustant el temps entre batec
    rr_interval = 60.0 / heart_rate * (1 + random(-rr_variability * 100, rr_variability * 100) / 100.0);
  
    // Reiniciar el temps després d'un batec complet
    if (temps >= rr_interval) {
      temps = 0.0;
    } 

    // Afegir les mostres al buffer D'ecg
    dataECG.buffer[dataECG.nsamples++] = ecg_value;

    if(dataECG.nsamples == DATA_LENGTH){
      for (int i = 0; i < 20; i++){
        array_ECG_Calculs.buffer[array_ECG_Calculs.nsamples] = dataECG.buffer[i];
        array_ECG_Calculs.nsamples++;
      }
    }

    dataResp.buffer[dataResp.nsamples++] = resp_value;

    /*
    // Cada 1.5 minuts (cada ~90000 ms), afegeix valors SNS, PNS i estrès
    if (millis() - last_sns_time > 90000) {
      float sns = random(20, 70) / 10.0;
      float pns = random(30, 80) / 10.0;
      float stress = 10.0 - (pns - sns);  // valor inventat per simulació
      data[nsamples] = sns;
      data[nsamples + 1] = pns;
      data[nsamples + 2] = stress;
      last_sns_time = millis();
    } else {
      data[nsamples] = 0.0;
      data[nsamples + 1] = 0.0;
      data[nsamples + 2] = 0.0;
    }
    nsamples = nsamples + 3;
    }*/

      //--------------------------------------------------------------------------

  // obtenir pic de la ona R
  
  // Guarda fins a 500 punts, quan arriba a 500 entra
  if(array_ECG_Calculs.nsamples >= 500){
    // Obtenir el pic R de les 500 mostres
    float pic_R = obtenir_pic_R(array_ECG_Calculs.buffer, 500); 
    // Obtenir el temps en milisegons on hi ha el pic R
    temps_pic = millis();
    
    //COMPROVAR TEMA INTERVALS############################################################

    // Quan no tenim prous temps guardats a l'array
    if(comptador_temps < 10){ // 2min*60s = 120 mostres
      // Guardem la variable dins un array
      array_temps_pic [comptador_temps] = temps_pic;
      comptador_temps++;
      Serial.println(comptador_temps);
    }
    else{// Si tenim prous elements guardats a l'array
      for(int i = 1; i < comptador_temps; i++){
        // Calculem els intervals de temps entre els pics R-R
        intervals_RR[i-1] = array_temps_pic[i] - array_temps_pic[i - 1];
        Serial.println(intervals_RR[i-1]);
      }
    }
    Serial.println(temps_pic);  // Utilitzem 'println' per saltar de línia després de imprimir el valor
    array_ECG_Calculs.nsamples = 0;
  }

    if (DATA_LENGTH == dataECG.nsamples){
      if (deviceConnected){
        // Calcular la mida del buffer en bytes
        size_t bufferSize = sizeof(dataTotal.buffer);

        // Enviar les dades per BLE
        sendLargeData(pTxCharacteristic , bufferSize);
        Serial.println("Dades enviades");
      }

      if(!deviceConnected && oldDeviceConnected){
        delay(500);
        pServer -> startAdvertising();
        oldDeviceConnected = deviceConnected;
      }

      if (deviceConnected && !oldDeviceConnected){
        oldDeviceConnected = deviceConnected;
      }
      
      p_wave = 0.0;
      qrs_wave = 0.0;
      t_wave = 0.0;
      
      dataECG.nsamples = 0;
      dataResp.nsamples = 0;
      dataTotal.nsamples = 0;
    }
  }
}
