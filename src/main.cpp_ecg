///Codi per simular un senyal ECG
#include <Arduino.h>
#include <InterpolationLib.h>

#define BAUD_RATIO 115200

unsigned long temps_pic = 0;
unsigned long array_temps_pic [100];
int comptador_temps = 0;
unsigned long intervals_RR [50];

// Constants per simular l'ECG
const float fs = 500.0;  // Frequència de mostreig (500 Hz)
const float duration = 10.0; // Durada en segons
const float heart_rate = 60.0;  // Ritme cardíac en BPM (bats per minut)

// Paràmetres de la forma de l'ECG
const float P_amp = 0.1;   // Amplitud de l'ona P
const float QRS_amp = 1.0; // Amplitud del complex QRS
const float T_amp = 0.3;   // Amplitud de l'ona T

const float P_duration = 0.1;   // Durada de l'ona P (en segons)
const float QRS_duration = 0.1; // Durada del complex QRS (en segons)
const float T_duration = 0.2;   // Durada de l'ona T (en segons)

// Temps i càlculs de les mostres
float temps = 0.0;
float dt = 1.0 / fs;
float rr_interval = 60.0 / heart_rate;  // Interval RR en segons
float rr_variability = 0.05;  // Variabilitat en el temps RR (5% de variació)

// Funció per generar una ona gaussiana per a les onades P, QRS i T
float gaussian_wave(float t, float amplitude, float duration) {
  return amplitude * exp(-0.5 * pow(t / (duration / 2.0), 2));
}

// Funció per simular el complex QRS amb una part negativa (Q i S)
float qrs_wave_with_negatives(float t, float amplitude, float duration) {
  // El complex QRS té una part negativa (Q i S)
  float positive_peak = gaussian_wave(t, amplitude, duration / 2.0);  // Paret positiva
  float negative_peak = gaussian_wave(t - duration / 2.0, -amplitude / 2.0, duration / 2.0); // Part negativa (Q i S)
  
  return positive_peak + negative_peak;
}

float obtenir_pic_R(float* senyal, int mida){

  int comptador = 0; //Comptador de quants pics trobem
  float pics_R[10] = {0};

  //bucle per trobar màxims
  for (int i = 1; i < mida - 1; i++) {
    if (senyal[i] > senyal[i - 1] && senyal[i] > senyal[i + 1]) {
      pics_R[comptador] = senyal[i];
      comptador++;
    }
  }

  //Obtenir pic màxim del senyal
  float pic_max = pics_R[0];
  for (int i = 1; i < comptador; i++) {
    if (pics_R[i] > pic_max) {
      pic_max = pics_R[i];
    }
  }
  return pic_max;
}


void setup() {
  // Inicialització de la comunicació sèrie
  Serial.begin(BAUD_RATIO);
  delay(1000);
  
  // Inicialitzar la funció random
  randomSeed(analogRead(0));  // Alimentem el generador de números aleatoris
}

// Declarem variables necessàries per a guardar els valors ecg
int num_punts = 0;
float array_ecg_signal[1000];

void loop() {
  // Calcular el senyal ECG com la suma de les onades P, QRS i T
  float p_wave = 0.0;
  float qrs_wave = 0.0;
  float t_wave = 0.0;

  // Assignar les onades al cicle del cor (P, QRS, T)
  // Ona P - Apareix abans del QRS
  if (temps < P_duration) {
    p_wave = gaussian_wave(temps, P_amp, P_duration);
  }

  // Complex QRS amb part negativa (Q i S)
  if (temps >= P_duration && temps < P_duration + QRS_duration) {
    qrs_wave = qrs_wave_with_negatives(temps - P_duration, QRS_amp, QRS_duration);
  }

  // Ona T - Apareix després del QRS
  if (temps >= P_duration + QRS_duration && temps < P_duration + QRS_duration + T_duration) {
    t_wave = gaussian_wave(temps - P_duration - QRS_duration, T_amp, T_duration);
  }

  // Senyal ECG com a suma de les onades P, QRS i T
  float ecg_signal = p_wave + qrs_wave + t_wave;

  // Mostrar el senyal ECG pel monitor sèrie
  //Serial.println(ecg_signal);

  // Incrementar el temps per al següent mostreig
  temps += dt;

  // Afegir variabilitat al interval RR, ajustant el temps entre batecs
  rr_interval = 60.0 / heart_rate * (1 + random(-rr_variability * 100, rr_variability * 100) / 100.0);

  // Reiniciar el temps després d'un batec complet
  if (temps >= rr_interval) {
    temps = 0.0;
  }

  //--------------------------------------------------------------------------

  // El nombre d'intervals RR sempre serà un menys que el nombre de pics R



  /////////// obtenir pic de la ona R ////////////////////////////////////////////////

  // Desa el valor actual del senyal ECG (`ecg_signal`) a l'array `array_ecg_signal` en la posició `num_punts`.
  array_ecg_signal[num_punts] = ecg_signal;
  // Incrementem el comptador de punts R recollits
  num_punts++;


  // Quan ja tenim més de 500 mostres del senyal ECG, podem començar a treballar amb aquest
  if(num_punts > 500){
    float pic_R = obtenir_pic_R(array_ecg_signal, 500); 
    //  Guarda el temps actual en mil·lisegons des de l'inici del programa (funció `millis()` d’Arduino), que ens diu quan ha passat el pic R.
    temps_pic = millis();

    if(comptador_temps < 100){
    array_temps_pic [comptador_temps] = temps_pic; // Desa el temps del pic R a l'array
    comptador_temps++; // Incrementem el comptador de pics R detectats
    }
    //  Si ja hem obtingut almenus 3 pics R detectats, podem començar amb el càlcul els intervals R-R (diferències de temps entre dos pics R consecutius).
    if(comptador_temps > 2){

      int num_rr = comptador_temps - 1; // Nombre d'intervals R-R = nombre de pics R - 1

      float x_vals[100]; // Índexs (0, 1, 2, ...) per a poder realitzar més endavant la interpolació
      float y_vals[100]; // Valors dels intervals R-R originals (en mil·lisegons)
      float rr_interpolats[200]; // Array on desarem els valors interpolats
      int num_interpolats = 0; // Comptador de valors interpolats

      //for(int i = 1; i < comptador_temps; i++){
        //intervals_RR[i-1] = array_temps_pic[i] - array_temps_pic[i - 1]; // Calcula l'interval R-R
        //Serial.println(intervals_RR[i-1]);



        //x_vals[i-1] = (float)(i - 1); // Posició (X) per interpolació
        //y_vals[i-1] = (float)intervals_RR[i-1] / 1000.0; // Converteix els intervals dels pics R-R de mil·lisegons a segons per fer la interpolació (Y)
      //}

///////////////// INTERPOL·LACIÓ DELS INTERVALS R-R ////////////////////////////////////////////
float temps_acumulat = 0;

for(int i = 1; i < comptador_temps; i++){
  float rr_s = (float) (array_temps_pic[i] - array_temps_pic[i - 1]) / 1000.0; // ms → s
  intervals_RR[i-1] = rr_s * 1000.0; // Guardem la seq d'intervals R-R original en ms (per si la necessitem)
  Serial.println(rr_s * 1000.0); // Mostrem en mil·lisegons

  temps_acumulat += rr_s; // Temps real acumulat en segons
  x_vals[i-1] = temps_acumulat; // Temps real (eix X)
  y_vals[i-1] = rr_s; // Valor R-R en segons (eix Y)
}

float pas = 0.25; // Pas d'interpolació en segons (0.25s trets del PPoint)
for (float i = x_vals[0]; i < x_vals[num_rr - 1]; i += pas) {
  rr_interpolats[num_interpolats] = Interpolation::Linear(x_vals, y_vals, num_rr, i, true);
  Serial.println(rr_interpolats[num_interpolats]); // Mostra valor interpolat
  num_interpolats++;
}
    //Serial.println(temps_pic);  // Utilitzem 'println' per saltar de línia després de imprimir el valor
    // Reinicialitzem el comptador de punts per a tornar a agafar un fragment de 500 mostres
    num_punts = 0;
  }

  // Retard per ajustar la freqüència de mostreig
  // Un cop s’ha processat el bloc de 500 punts, es reinicia el comptador per començar a omplir l’array de nou amb noves mostres.
  delay(1000 / fs);
}